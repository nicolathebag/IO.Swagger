/*
 * Swagger ItaliaTreni - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * OpenAPI spec version: 1.0.11
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Domain.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Defect : IEquatable<Defect>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Mm
        /// </summary>

        [DataMember(Name="mm")]
        public long? Mm { get; set; }

        /// <summary>
        /// Gets or Sets Delta
        /// </summary>

        [DataMember(Name="delta")]
        public double? Delta { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>

        [DataMember(Name="level")]
        public string Level { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>

        [DataMember(Name="length")]
        public long? Length { get; set; }

        [DataMember(Name = "param")]
        public int? Param { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Defect {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Mm: ").Append(Mm).Append("\n");
            sb.Append("  Delta: ").Append(Delta).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Defect)obj);
        }

        /// <summary>
        /// Returns true if Defect instances are equal
        /// </summary>
        /// <param name="other">Instance of Defect to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Defect other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Mm == other.Mm ||
                    Mm != null &&
                    Mm.Equals(other.Mm)
                ) && 
                (
                    Delta == other.Delta ||
                    Delta != null &&
                    Delta.Equals(other.Delta)
                ) && 
                (
                    Level == other.Level ||
                    Level != null &&
                    Level.Equals(other.Level)
                ) && 
                (
                    Length == other.Length ||
                    Length != null &&
                    Length.Equals(other.Length)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Mm != null)
                    hashCode = hashCode * 59 + Mm.GetHashCode();
                    if (Delta != null)
                    hashCode = hashCode * 59 + Delta.GetHashCode();
                    if (Level != null)
                    hashCode = hashCode * 59 + Level.GetHashCode();
                    if (Length != null)
                    hashCode = hashCode * 59 + Length.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Defect left, Defect right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Defect left, Defect right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
