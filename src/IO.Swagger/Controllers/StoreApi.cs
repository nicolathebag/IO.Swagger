/*
 * Swagger ItaliaTreni - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * OpenAPI spec version: 1.0.11
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using Domain.Models;
using Infrastructure;
using Infrastructure.Persistance.Repositories;
using Application.Interfaces.Repositories;
using System.Threading.Tasks;



namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class StoreApiController : ControllerBase
    {
        private readonly IMeasureRepository measureRepository;

        public StoreApiController(IMeasureRepository measureRepository)
        {
            this.measureRepository = measureRepository;
        }
        /// <summary>
        /// Add a new range of mm on DB
        /// </summary>
        /// <remarks>Add a new km to the DB</remarks>
        /// <param name="body">Store a new Km in the DB</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        [HttpPost]
        [Route("/api/v3/store")]
        [ValidateModelState]
        [SwaggerOperation("AddKm")]
        public virtual async Task<IActionResult> AddKmAsync([FromBody]List<Measure> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            int result = await measureRepository.StoreMeasures(body);
            if (result > 0)
            {
                return StatusCode(200);
            }
            

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Finds data by range
        /// </summary>
        /// <remarks>Get data by range</remarks>
        /// <param name="initialMm">Range will be used to filter data from db</param>
        /// <param name="endMm">Range will be used to filter data from db</param>
        /// <param name="page">paginated results</param>
        /// <param name="pgSize">paginated results</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid status value</response>
        [HttpGet]
        [Route("/api/v3/store/getByRange/{page}/{pgSize}")]
        [ValidateModelState]
        [SwaggerOperation("GetDataByRange")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Measure>), description: "successful operation")]
        public virtual IActionResult GetDataByRangeAsync([FromQuery][Required()]double? initialMm, [FromQuery][Required()]double? endMm, [FromRoute][Required]int? page, [FromRoute][Required]int? pgSize)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            List<Measure> result = null;
            result = measureRepository.GetMeasures((double)initialMm, (double)endMm, (int)page, (int)pgSize);
            
            if (result != null)
            {
                return StatusCode(200,result);
            }
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"mm\" : 198772,\n  \"p1\" : 7.131,\n  \"p2\" : 0,\n  \"p3\" : 0,\n  \"p4\" : 0,\n  \"id\" : 10\n}, {\n  \"mm\" : 198772,\n  \"p1\" : 7.131,\n  \"p2\" : 0,\n  \"p3\" : 0,\n  \"p4\" : 0,\n  \"id\" : 10\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Measure>>(exampleJson)
                        : default(List<Measure>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
