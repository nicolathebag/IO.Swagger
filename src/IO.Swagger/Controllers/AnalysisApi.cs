/*
 * Swagger ItaliaTreni - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * OpenAPI spec version: 1.0.11
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using Domain.Models;
using System.Threading;
using Application.Interfaces.Repositories;
using Infrastructure.Persistance.Repositories;
using System.Threading.Tasks;
using System.IO;


namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AnalysisApiController : ControllerBase
    {
        private readonly IMeasureRepository measureRepository;
        private readonly IJobRepository jobRepository;

        public AnalysisApiController(IMeasureRepository measureRepository, IJobRepository jobRepository)
        {
            this.measureRepository = measureRepository;
            this.jobRepository = jobRepository;
        }
        /// <summary>
        /// Get analysis state and eventually results
        /// </summary>
        /// <param name="GUID">GUID of the analysis</param>
        /// <response code="200">successful operation</response>
        /// <response code="202">successful operation</response>
        /// <response code="400">Invalid input</response>
        [HttpGet]
        [Route("/api/v3/analysis/{GUID}")]
        [ValidateModelState]
        [SwaggerOperation("GetAnalysisResults")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Defect>), description: "successful operation")]
        [SwaggerResponse(statusCode: 202, type: typeof(string), description: "successful operation")]
        public virtual IActionResult GetAnalysisResults([FromRoute][Required]int? GUID)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Defect>));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(string));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"mm\" : 198772,\n  \"level\" : \"low\",\n  \"delta\" : 1.3,\n  \"length\" : 0,\n  \"id\" : 10\n}, {\n  \"mm\" : 198772,\n  \"level\" : \"low\",\n  \"delta\" : 1.3,\n  \"length\" : 0,\n  \"id\" : 10\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Defect>>(exampleJson)
                        : default(List<Defect>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Start analysis
        /// </summary>
        /// <param name="par">Parameter you want to analise</param>
        /// <param name="initialMm">Start point of range</param>
        /// <param name="endMm">End point of range</param>
        /// <param name="lowThr">Low level threshold</param>
        /// <param name="mediumThr">Mid level threshold</param>
        /// <param name="highThr">High level threshold</param>
        /// <response code="202">Successful operation</response>
        /// <response code="400">Invalid input</response>
        [HttpPost]
        [Route("/api/v3/analysis/{par}")]
        [ValidateModelState]
        [SwaggerOperation("StartAnalysisOnDataGivenARangeAndASetOfThresholds")]
        [SwaggerResponse(statusCode: 202, type: typeof(string), description: "Successful operation")]
        public virtual IActionResult StartAnalysisOnDataGivenARangeAndASetOfThresholds([FromRoute][Required]int? par, [FromQuery][Required()]long? initialMm, [FromQuery][Required()]long? endMm, [FromQuery][Required()]double? lowThr, [FromQuery][Required()]double? mediumThr, [FromQuery][Required()]double? highThr)
        {
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            var guid = Guid.NewGuid();            
            WorkerInput workerInput = new WorkerInput((int)par,(long)initialMm, (long)endMm,(double)lowThr, (double)mediumThr, (double)highThr, guid.ToString());
            Thread thread = new Thread(new ParameterizedThreadStart(Worker),1500);
            thread.Start(workerInput);
            return StatusCode(202, guid.ToString());

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "\"GUID\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        async void Worker(object obj)
        {
            var workerInput = (WorkerInput)obj;
            jobRepository.StoreJobAsync(workerInput.guid, "Pending");
            // Do some work in the worker thread
            var defectsList =  await measureRepository.FilterMeasuresAsync(workerInput.par, workerInput.initialMM, workerInput.endMM, workerInput.low, workerInput.medium, workerInput.high);
            using (StreamWriter outputFile = new StreamWriter(Path.Combine(@"./temp", $"{workerInput.guid}.txt")))
            {
                string json = JsonConvert.SerializeObject(defectsList);
                outputFile.Write(json);
            }
            jobRepository.StoreJobAsync(workerInput.guid, "Success");
        }

        internal class WorkerInput
        {
            public int par { get; set; }
            public string guid { get; set; }
            public long initialMM { get; set; }
            public long endMM { get; set; }
            public double low { get; set; }
            public double medium { get; set; }
            public double high { get; set; }

            public WorkerInput(int par, long initialMM, long endMM, double low, double medium, double high, string guid)
            {
                this.guid = guid;
                this.par = par;
                this.initialMM = initialMM;
                this.endMM = endMM;
                this.low = low;
                this.medium = medium;
                this.high = high;
            }
        }
    }
}
